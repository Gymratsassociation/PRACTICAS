{"mappings":"AAAA,uBAAuB;AACvB,MAAM,UAAU;AAEhB,kDAAkD;AAClD,QAAQ,GAAG,CAAC,kBAAkB,GAAG,QAAQ,IAAI,CAAC;AAE9C,0CAA0C;AAC1C,eAAe;IACb,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,IAAI,CAAC,GAAG,uCAAuC;QACvF,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAElB,MAAM,QAAQ,MAAM,SAAS,IAAI;QACjC,QAAQ,GAAG,CAAC,aAAa;QACzB,YAAY;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;IAC9C;AACF;AAEA,yDAAyD;AACzD,eAAe,SAAS,QAAQ,EAAE,QAAQ;IACxC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,KAAK,CAAC,EAAE;YAC9C,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAU;YAAS;QAC5C;QACA,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAElB,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,uBAAuB;QACnC,MAAM,CAAC,YAAY,EAAE,KAAK,MAAM,EAAE;QAClC,yCAAyC;QACzC,OAAO,QAAQ,CAAC,IAAI,GAAG,CAAC,uBAAuB,EAAE,mBAAmB,KAAK,MAAM,GAAG;IACpF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACR;AACF;AAEA,gDAAgD;AAChD,SAAS,YAAY,KAAK;IACxB,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,SAAS,SAAS,GAAG;IACrB,MAAM,OAAO,CAAC,CAAC;QACb,MAAM,KAAK,SAAS,aAAa,CAAC;QAClC,GAAG,WAAW,GAAG,GAAG,KAAK,MAAM,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;QACjD,SAAS,WAAW,CAAC;IACvB;AACF;AAEA,mEAAmE;AACnE;AAEA,oDAAoD;AACpD,SAAS,cAAc,CAAC,oBAAoB,gBAAgB,CAAC,SAAS;IACpE,MAAM,WAAW,SAAS,cAAc,CAAC,kBAAkB,KAAK;IAChE,MAAM,WAAW,SAAS,cAAc,CAAC,kBAAkB,KAAK;IAChE,SAAS,UAAU;AACrB","sources":["src/js/login.js"],"sourcesContent":["// URL base del backend\r\nconst API_URL = 'http://localhost:8080/api/users';\r\n\r\n// Verifica que la URL esté definida correctamente\r\nconsole.log('URL de la API:', `${API_URL}/all`);\r\n\r\n// Función para obtener todos los usuarios\r\nasync function fetchUsers() {\r\n  try {\r\n    const response = await fetch(`${API_URL}/all`); // Ruta para obtener todos los usuarios\r\n    if (!response.ok) {\r\n      throw new Error('Error al obtener los usuarios');\r\n    }\r\n    const users = await response.json();\r\n    console.log('Usuarios:', users);\r\n    renderUsers(users);\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios:', error);\r\n  }\r\n}\r\n\r\n// Función para buscar un usuario por nombre y contraseña\r\nasync function findUser(username, password) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/find`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Usuario no encontrado o credenciales incorrectas');\r\n    }\r\n    const user = await response.json();\r\n    console.log('Usuario encontrado:', user);\r\n    alert(`Bienvenido, ${user.nombre}`);\r\n    // Redirige a otra página si es necesario\r\n    window.location.href = `usuarios.html?username=${encodeURIComponent(user.nombre)}`;\r\n  } catch (error) {\r\n    console.error('Error al buscar usuario:', error);\r\n    alert('Usuario no encontrado o credenciales incorrectas');\r\n  }\r\n}\r\n\r\n// Función para renderizar usuarios en la página\r\nfunction renderUsers(users) {\r\n  const userList = document.getElementById('user-list');\r\n  userList.innerHTML = '';\r\n  users.forEach((user) => {\r\n    const li = document.createElement('li');\r\n    li.textContent = `${user.nombre} (${user.email})`;\r\n    userList.appendChild(li);\r\n  });\r\n}\r\n\r\n// Llama a la función para obtener los usuarios al cargar la página\r\nfetchUsers();\r\n\r\n// Ejemplo de integración con botones en la interfaz\r\ndocument.getElementById('find-user-button').addEventListener('click', () => {\r\n  const username = document.getElementById('username-input').value;\r\n  const password = document.getElementById('password-input').value;\r\n  findUser(username, password);\r\n});\r\n"],"names":[],"version":3,"file":"usuarios.000f99f6.js.map","sourceRoot":"/__parcel_source_root/"}